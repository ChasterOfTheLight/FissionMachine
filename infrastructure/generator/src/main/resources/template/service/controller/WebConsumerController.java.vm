package ${package}.${moduleName}.service.controller;

import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import ${package}.common.response.PageData;
import ${package}.common.response.Response;
import ${package}.common.response.ResponseCode;
import ${package}.${moduleName}.service.param.${className}DeleteParam;
import ${package}.${moduleName}.service.param.${className}InfoQueryParam;
import ${package}.${moduleName}.service.param.${className}InsertParam;
import ${package}.${moduleName}.service.param.${className}PageQueryParam;
import ${package}.${moduleName}.service.param.${className}UpdateParam;
import ${package}.${moduleName}.api.vo.${className}QueryVo;
import ${package}.${moduleName}.service.entity.${className}Entity;
import ${package}.${moduleName}.service.service.I${className}Service;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import org.springframework.util.CollectionUtils;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.validation.Valid;
import java.util.stream.Collectors;

/**
 * ${comments}对外接口服务控制器.
 *
 * @author ${author}
 * @date ${datetime}
 */
@Api(value = "${comments}相关接口", tags = {"WEB-${comments}相关接口"})
@Slf4j
@RestController
@RequestMapping("/${pathName}/web")
public class ${className}WebController {

    private final I${className}Service ${classname}Service;

    public ${className}WebController(I${className}Service ${classname}Service) {
        this.${classname}Service = ${classname}Service;
    }

    /**
     * 分页查询列表.
     *
     * @param param 分页查询参数
     * @return 数据分页集合
     */
    @ApiOperation(value = "分页查询${comments}列表", notes = "分页查询${comments}列表")
    @PostMapping(value = "/pageList", produces = {"application/json"})
    public Response<PageData<${className}QueryVo>> pageList(
            @Valid @RequestBody ${className}PageQueryParam param) {
        Page<${className}Entity> queryPage = ${classname}Service.queryPage(param.getPageNum(), param.PageSize(),
                new ${className}Entity());
        if (CollectionUtils.isEmpty(queryPage.getRecords())) {
            return Response.success(PageData.empty(param.getPageSize(), param.getPageNum()));
        }

        return Response.success(new PageData<>(
                queryPage.getRecords().stream().map(${className}Entity::convert2Vo).collect(Collectors.toList()),
                queryPage.getTotal(), queryPage.getSize(), queryPage.getCurrent()));
    }

    /**
     * 详情.
     *
     * @param param 详情查询参数
     * @return 详情
     */
    @ApiOperation(value = "${comments}详情查询", notes = "${comments}详情查询")
    @PostMapping(value = "/info", produces = {"application/json"})
    public Response<${className}QueryVo> info(@Valid @RequestBody ${className}InfoQueryParam param) {
            ${className}Entity ${classname} = ${classname}Service.queryById(param.get${pk.attrName}());
            ${className}QueryVo vo = ${className}Entity.convert2Vo(${classname});
        return Response.success(vo);
    }

    /**
     * 新增.
     *
     * @param param 新增参数
     * @return 成功 | 失败
     */
    @ApiOperation(value = "新增${comments}数据", notes = "新增${comments}数据")
    @PostMapping(value = "/save", produces = {"application/json"})
    public Response<Boolean> save(@Valid @RequestBody ${className}InsertParam param) {
        boolean result = ${classname}Service.insert(${className}Entity.convertFromInsertParam(param));
        return result ? Response.success(true) : Response.other(ResponseCode.FAIL, "新增失败", false);
    }

    /**
     * 更新.
     *
     * @param param 更新参数
     * @return 成功 | 失败
     */
    @ApiOperation(value = "更新${comments}数据", notes = "更新${comments}数据")
    @PostMapping(value = "/update", produces = {"application/json"})
    public Response<Boolean> update(@Valid @RequestBody ${className}UpdateParam param) {
        boolean result = ${classname}Service.update(${className}Entity.convertFromUpdateParam(param));
        return result ? Response.success(true) : Response.other(ResponseCode.FAIL, "更新失败", false);
    }

    /**
     * 删除.
     *
     * @param param 删除参数
     * @return 成功 | 失败
     */
    @ApiOperation(value = "删除${comments}数据", notes = "删除${comments}数据")
    @PostMapping(value = "/delete", produces = {"application/json"})
    public Response<Boolean> delete(@Valid @RequestBody ${className}DeleteParam param) {
        boolean result = ${classname}Service.deleteById(param.get${pk.attrName}());
        return result ? Response.success(true) : Response.other(ResponseCode.FAIL, "删除失败", false);
    }

}
